package com.example.weatherapp.ui.components

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.rounded.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.CompositionLocalProvider
import androidx.compose.runtime.remember
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.alpha
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalLayoutDirection
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.LayoutDirection
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.weatherapp.data.model.WeatherResponse

private const val TAG = "WeatherCard"

@Composable
fun WeatherCard(data: WeatherResponse) {
    val (aqiDescription, aqiDetails, aqiColor) = when (data.aqi) {
        1 -> Triple("ÿÆ€åŸÑ€å ÿÆŸàÿ®", "ŸáŸàÿß Ÿæÿß⁄© ÿßÿ≥ÿ™. ŸÖŸÜÿßÿ≥ÿ® ÿ®ÿ±ÿß€å ŸáŸÖŸá. üåø", Color(0xFF4CAF50))
        2 -> Triple("ÿÆŸàÿ®", "ŸáŸàÿß ÿ≥ÿßŸÑŸÖ ÿßÿ≥ÿ™. ÿ®ÿØŸàŸÜ ŸÖÿ¥⁄©ŸÑ ÿ®ÿ±ÿß€å ÿ®€åÿ¥ÿ™ÿ± ÿßŸÅÿ±ÿßÿØ. üòä", Color(0xFF8BC34A))
        3 -> Triple("ŸÖÿ™Ÿàÿ≥ÿ∑", "ŸÖŸÖ⁄©ŸÜ ÿßÿ≥ÿ™ ÿ®ÿ±ÿß€å ÿßŸÅÿ±ÿßÿØ ÿ≠ÿ≥ÿßÿ≥ ÿ¢ÿ≤ÿßÿ±ÿØŸáŸÜÿØŸá ÿ®ÿßÿ¥ÿØ. üòê", Color(0xFFFFC107))
        4 -> Triple("ŸÜÿßÿ≥ÿßŸÑŸÖ", "ÿ®ÿ±ÿß€å ⁄Øÿ±ŸàŸá‚ÄåŸáÿß€å ÿ≠ÿ≥ÿßÿ≥ ÿÆÿ∑ÿ±ŸÜÿß⁄© ÿßÿ≥ÿ™. üò∑", Color(0xFFFF9800))
        5 -> Triple("ÿÆ€åŸÑ€å ŸÜÿßÿ≥ÿßŸÑŸÖ", "ÿ®ÿ±ÿß€å ŸáŸÖŸá ÿÆÿ∑ÿ±ŸÜÿß⁄© ÿßÿ≥ÿ™. ÿ™Ÿàÿµ€åŸá ŸÖ€å‚Äåÿ¥ŸàÿØ ÿØÿ± ÿÆÿßŸÜŸá ÿ®ŸÖÿßŸÜ€åÿØ. ‚ò†Ô∏è", Color(0xFFF44336))
        else -> Triple("ŸÜÿßŸÖÿ¥ÿÆÿµ", "ÿßÿ∑ŸÑÿßÿπÿßÿ™€å ŸÖŸàÿ¨ŸàÿØ ŸÜ€åÿ≥ÿ™.", Color(0xFF9E9E9E))
    }

    // ŸÑÿß⁄Ø ⁄©ÿ±ÿØŸÜ ÿßÿ∑ŸÑÿßÿπÿßÿ™ Ÿàÿ∂ÿπ€åÿ™ ŸáŸàÿß ÿ®ÿ±ÿß€å ÿØ€åÿ®ÿß⁄Ø
    val weatherMain = data.weather.firstOrNull()?.main ?: ""
    val weatherDescription = data.weather.firstOrNull()?.description ?: ""
    
    Log.d(TAG, "Weather data - Main: '$weatherMain', Description: '$weatherDescription'")
    
    // ÿ™ÿπ€å€åŸÜ ÿ¢€å⁄©ŸàŸÜ ÿ®ÿß ÿ™ÿ∑ÿ®€åŸÇ ÿØŸÇ€åŸÇ‚Äåÿ™ÿ±
    val weatherIcon = remember(weatherMain) {
        val mainLowerCase = weatherMain.lowercase().trim()
        Log.d(TAG, "Weather main (lowercase): '$mainLowerCase'")
        
        when {
            mainLowerCase.contains("clear") -> Icons.Rounded.WbSunny
            mainLowerCase.contains("cloud") -> Icons.Rounded.Cloud
            mainLowerCase.contains("rain") -> Icons.Rounded.WaterDrop
            mainLowerCase.contains("drizzle") -> Icons.Rounded.Grain
            mainLowerCase.contains("thunder") -> Icons.Rounded.Thunderstorm
            mainLowerCase.contains("snow") -> Icons.Rounded.AcUnit
            mainLowerCase.contains("mist") -> Icons.Rounded.Waves
            mainLowerCase.contains("fog") -> Icons.Rounded.Cloud
            mainLowerCase.contains("haze") -> Icons.Rounded.Cloud
            mainLowerCase.contains("smoke") -> Icons.Rounded.Cloud
            mainLowerCase.contains("dust") -> Icons.Rounded.Air
            mainLowerCase.contains("sand") -> Icons.Rounded.Landscape
            mainLowerCase.contains("ash") -> Icons.Rounded.Cloud
            mainLowerCase.contains("squall") -> Icons.Rounded.Air
            mainLowerCase.contains("tornado") -> Icons.Rounded.Cyclone
            else -> {
                Log.d(TAG, "No matching icon found for weather main: '$mainLowerCase', defaulting to WbSunny")
                Icons.Rounded.WbSunny
            }
        }
    }

    fun getWeatherDescription(desc: String?): String {
        return when (desc?.lowercase()?.trim()) {
            "clear sky" -> "ÿ¢ÿ≥ŸÖÿßŸÜ ÿµÿßŸÅ"
            "few clouds" -> "⁄©ŸÖ€å ÿßÿ®ÿ±€å"
            "scattered clouds" -> "ŸÜ€åŸÖŸá ÿßÿ®ÿ±€å"
            "broken clouds" -> "ÿßÿ®ÿ±€å"
            "shower rain" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ®ÿßÿ±ÿßŸÜ"
            "rain" -> "ÿ®ÿßÿ±ÿßŸÜ€å"
            "thunderstorm" -> "ÿ±ÿπÿØ Ÿà ÿ®ÿ±ŸÇ"
            "snow" -> "ÿ®ÿ±ŸÅ€å"
            "mist" -> "ŸÖŸá ÿ¢ŸÑŸàÿØ"
            "overcast clouds" -> "⁄©ÿßŸÖŸÑÿßŸã ÿßÿ®ÿ±€å"
            "light rain" -> "ÿ®ÿßÿ±ÿßŸÜ ÿ≥ÿ®⁄©"
            "moderate rain" -> "ÿ®ÿßÿ±ÿßŸÜ ŸÖÿ™Ÿàÿ≥ÿ∑"
            "heavy intensity rain" -> "ÿ®ÿßÿ±ÿßŸÜ ÿ¥ÿØ€åÿØ"
            "very heavy rain" -> "ÿ®ÿßÿ±ÿßŸÜ ÿÆ€åŸÑ€å ÿ¥ÿØ€åÿØ"
            "extreme rain" -> "ÿ®ÿßÿ±ÿßŸÜ ÿ®ÿ≥€åÿßÿ± ÿ¥ÿØ€åÿØ"
            "freezing rain" -> "ÿ®ÿßÿ±ÿßŸÜ €åÿÆ ÿ≤ÿØŸá"
            "light intensity shower rain" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ®ÿßÿ±ÿßŸÜ ÿ≥ÿ®⁄©"
            "heavy intensity shower rain" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ®ÿßÿ±ÿßŸÜ ÿ¥ÿØ€åÿØ"
            "ragged shower rain" -> "ÿ±⁄Øÿ®ÿßÿ± ŸÜÿßŸÖŸÜÿ∏ŸÖ"
            "light snow" -> "ÿ®ÿ±ŸÅ ÿ≥ÿ®⁄©"
            "heavy snow" -> "ÿ®ÿ±ŸÅ ÿ≥ŸÜ⁄Ø€åŸÜ"
            "sleet" -> "ÿ™⁄Øÿ±⁄Ø Ÿà ÿ®ÿ±ŸÅ"
            "light shower sleet" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ≥ÿ®⁄© ÿ™⁄Øÿ±⁄Ø Ÿà ÿ®ÿ±ŸÅ"
            "shower sleet" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ™⁄Øÿ±⁄Ø Ÿà ÿ®ÿ±ŸÅ"
            "light rain and snow" -> "ÿ®ÿßÿ±ÿßŸÜ Ÿà ÿ®ÿ±ŸÅ ÿ≥ÿ®⁄©"
            "rain and snow" -> "ÿ®ÿßÿ±ÿßŸÜ Ÿà ÿ®ÿ±ŸÅ"
            "light shower snow" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ®ÿ±ŸÅ ÿ≥ÿ®⁄©"
            "shower snow" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ®ÿ±ŸÅ"
            "heavy shower snow" -> "ÿ±⁄Øÿ®ÿßÿ± ÿ®ÿ±ŸÅ ÿ≥ŸÜ⁄Ø€åŸÜ"
            "fog" -> "ŸÖŸá ÿ∫ŸÑ€åÿ∏"
            "haze" -> "ÿ∫ÿ®ÿßÿ±"
            "smoke" -> "ÿØŸàÿØ"
            "dust" -> "⁄Øÿ±ÿØ Ÿà ÿÆÿß⁄©"
            "sand" -> "⁄Øÿ±ÿØ Ÿà ÿÆÿß⁄©"
            "ash" -> "ÿÆÿß⁄©ÿ≥ÿ™ÿ±"
            "squall" -> "ÿ™ŸÜÿØÿ®ÿßÿØ"
            "tornado" -> "⁄Øÿ±ÿØÿ®ÿßÿØ"
            else -> {
                Log.d(TAG, "No matching description found for: '$desc', using original value")
                desc ?: "ŸÜÿßŸÖÿ¥ÿÆÿµ"
            }
        }
    }

    // ⁄Øÿ±ÿßÿØ€åÿßŸÜ ÿ®ÿß ÿ±ŸÜ⁄Ø‚ÄåŸáÿß€å ÿ≤€åÿ®ÿßÿ™ÿ±
    val cardGradient = remember(weatherMain) {
        val mainLowerCase = weatherMain.lowercase().trim()
        when {
            mainLowerCase.contains("clear") -> Brush.verticalGradient(colors = listOf(Color(0xFF1E88E5), Color(0xFF64B5F6)))  // ÿ¢ÿ®€å ÿ±Ÿàÿ¥ŸÜ
            mainLowerCase.contains("cloud") -> Brush.verticalGradient(colors = listOf(Color(0xFF546E7A), Color(0xFF78909C)))  // ÿÆÿß⁄©ÿ≥ÿ™ÿ±€å ÿ¢ÿ®€å
            mainLowerCase.contains("rain") || mainLowerCase.contains("drizzle") -> 
                Brush.verticalGradient(colors = listOf(Color(0xFF0277BD), Color(0xFF0288D1)))  // ÿ¢ÿ®€å ÿ™€åÿ±Ÿá
            mainLowerCase.contains("thunder") -> 
                Brush.verticalGradient(colors = listOf(Color(0xFF303F9F), Color(0xFF3949AB)))  // ÿ¢ÿ®€å ÿ®ŸÜŸÅÿ¥
            mainLowerCase.contains("snow") -> 
                Brush.verticalGradient(colors = listOf(Color(0xFF42A5F5), Color(0xFF90CAF9)))  // ÿ¢ÿ®€å ÿ±Ÿàÿ¥ŸÜ ÿ®ÿ±ÿßŸÇ
            mainLowerCase.contains("mist") || mainLowerCase.contains("fog") || mainLowerCase.contains("haze") -> 
                Brush.verticalGradient(colors = listOf(Color(0xFF78909C), Color(0xFFB0BEC5)))  // ÿÆÿß⁄©ÿ≥ÿ™ÿ±€å
            mainLowerCase.contains("dust") || mainLowerCase.contains("sand") || mainLowerCase.contains("ash") -> 
                Brush.verticalGradient(colors = listOf(Color(0xFFBCAAA4), Color(0xFFD7CCC8)))  // ŸÇŸáŸàŸá‚Äåÿß€å ÿ±Ÿàÿ¥ŸÜ
            else -> Brush.verticalGradient(colors = listOf(Color(0xFF2196F3), Color(0xFF64B5F6)))  // Ÿæ€åÿ¥‚ÄåŸÅÿ±ÿ∂
        }
    }

    CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Rtl) {
        Card(
            modifier = Modifier
                .padding(16.dp)
                .fillMaxWidth(),
            shape = RoundedCornerShape(24.dp),
            elevation = CardDefaults.cardElevation(12.dp)
        ) {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                // Header section with weather icon and temperature
                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))
                        .background(brush = cardGradient)
                        .padding(vertical = 32.dp, horizontal = 24.dp)
                ) {
                    Column(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        Icon(
                            imageVector = weatherIcon,
                            contentDescription = "ÿ¢€å⁄©ŸàŸÜ Ÿàÿ∂ÿπ€åÿ™ ŸáŸàÿß",
                            tint = Color.White,
                            modifier = Modifier.size(100.dp)
                        )
                        
                        Spacer(modifier = Modifier.height(24.dp))
                        
                        Text(
                            text = "${data.main.temp.toInt()}¬∞C",
                            color = Color.White,
                            fontSize = 56.sp,
                            fontWeight = FontWeight.Bold
                        )
                        
                        Spacer(modifier = Modifier.height(8.dp))
                        
                        Card(
                            modifier = Modifier
                                .padding(8.dp),
                            shape = RoundedCornerShape(24.dp),
                            colors = CardDefaults.cardColors(
                                containerColor = Color.White.copy(alpha = 0.2f)
                            )
                        ) {
                            Text(
                                text = getWeatherDescription(data.weather.firstOrNull()?.description),
                                color = Color.White,
                                fontSize = 20.sp,
                                fontWeight = FontWeight.Medium,
                                modifier = Modifier.padding(horizontal = 20.dp, vertical = 10.dp),
                                textAlign = TextAlign.Center
                            )
                        }
                    }
                }
                
                // Details section
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(24.dp),
                    verticalArrangement = Arrangement.spacedBy(16.dp)
                ) {
                    Text(
                        text = "ÿ¨ÿ≤ÿ¶€åÿßÿ™ ÿ¢ÿ® Ÿà ŸáŸàÿß",
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold
                        ),
                        color = Color(0xFF0D47A1),
                        modifier = Modifier.padding(bottom = 8.dp)
                    )
                    
                    DetailRow(
                        icon = Icons.Rounded.Thermostat,
                        title = "ÿØŸÖÿß",
                        value = "${data.main.temp.toInt()}¬∞C",
                        iconTint = Color(0xFFE91E63)
                    )
                    
                    DetailRow(
                        icon = Icons.Rounded.WaterDrop,
                        title = "ÿ±ÿ∑Ÿàÿ®ÿ™",
                        value = "${data.main.humidity}%",
                        iconTint = Color(0xFF03A9F4)
                    )
                    
                    DetailRow(
                        icon = Icons.Rounded.Air,
                        title = "ÿ≥ÿ±ÿπÿ™ ÿ®ÿßÿØ",
                        value = "${data.wind.speed} ÿ´ÿßŸÜ€åŸá/ŸÖÿ™ÿ±",
                        iconTint = Color(0xFF00BCD4)
                    )
                    
                    Divider(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 8.dp),
                        color = Color(0xFFE0E0E0),
                        thickness = 1.dp
                    )
                    
                    Text(
                        text = "⁄©€åŸÅ€åÿ™ ŸáŸàÿß",
                        style = MaterialTheme.typography.titleMedium.copy(
                            fontSize = 18.sp,
                            fontWeight = FontWeight.Bold
                        ),
                        color = Color(0xFF0D47A1),
                        modifier = Modifier.padding(top = 8.dp, bottom = 8.dp)
                    )
                    
                    AqiCard(
                        aqiValue = data.aqi,
                        aqiDescription = aqiDescription,
                        aqiColor = aqiColor
                    )
                    
                    data.pm2_5?.let {
                        DetailRow(
                            icon = Icons.Rounded.BlurOn,
                            title = "ÿ∞ÿ±ÿßÿ™ ŸÖÿπŸÑŸÇ",
                            value = "${"%.1f".format(it)} Œºg/m¬≥",
                            iconTint = Color(0xFF9C27B0)
                        )
                    }
                    
                    // AQI Details
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(top = 8.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = CardDefaults.cardColors(
                            containerColor = Color(0xFFF5F5F5)
                        )
                    ) {
                        Text(
                            text = aqiDetails,
                            style = MaterialTheme.typography.bodyMedium,
                            color = Color(0xFF424242),
                            modifier = Modifier.padding(16.dp)
                        )
                    }
                }
            }
        }
    }
}

@Composable
fun AqiCard(aqiValue: Int, aqiDescription: String, aqiColor: Color) {
    Card(
        modifier = Modifier
            .fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = CardDefaults.cardColors(
            containerColor = aqiColor.copy(alpha = 0.1f)
        )
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically
            ) {
                Card(
                    modifier = Modifier.size(48.dp),
                    shape = RoundedCornerShape(12.dp),
                    colors = CardDefaults.cardColors(containerColor = aqiColor)
                ) {
                    Box(
                        modifier = Modifier.fillMaxSize(),
                        contentAlignment = Alignment.Center
                    ) {
                        Text(
                            text = "$aqiValue",
                            color = Color.White,
                            fontWeight = FontWeight.Bold,
                            fontSize = 22.sp
                        )
                    }
                }
                
                Spacer(modifier = Modifier.width(16.dp))
                
                Text(
                    text = "ÿ¥ÿßÿÆÿµ ⁄©€åŸÅ€åÿ™ ŸáŸàÿß",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium
                )
            }
            
            Text(
                text = aqiDescription,
                style = MaterialTheme.typography.bodyLarge.copy(
                    fontWeight = FontWeight.Bold,
                    fontSize = 18.sp
                ),
                color = aqiColor
            )
        }
    }
}

@Composable
fun DetailRow(
    icon: ImageVector,
    title: String,
    value: String,
    iconTint: Color = Color(0xFF1976D2)
) {
    CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Rtl) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 2.dp)
        ) {
            Card(
                modifier = Modifier.size(42.dp),
                shape = RoundedCornerShape(12.dp),
                colors = CardDefaults.cardColors(containerColor = iconTint.copy(alpha = 0.1f))
            ) {
                Box(
                    modifier = Modifier.fillMaxSize(),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        icon,
                        contentDescription = title,
                        tint = iconTint,
                        modifier = Modifier.size(24.dp)
                    )
                }
            }
            
            Spacer(modifier = Modifier.width(16.dp))
            
            Text(
                text = title,
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.weight(1f)
            )
            
            CompositionLocalProvider(LocalLayoutDirection provides LayoutDirection.Ltr) {
                Text(
                    text = value,
                    style = MaterialTheme.typography.bodyLarge.copy(
                        fontWeight = FontWeight.Bold,
                        fontSize = 18.sp
                    ),
                    color = Color(0xFF0D47A1)
                )
            }
        }
    }
}
